{"ts":1360895018442,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<!doctype html>\n<!--[if lt IE 7]> <html class=\"no-js lt-ie9 lt-ie8 lt-ie7\" lang=\"en\"> <![endif]-->\n<!--[if IE 7]>    <html class=\"no-js lt-ie9 lt-ie8\" lang=\"en\"> <![endif]-->\n<!--[if IE 8]>    <html class=\"no-js lt-ie9\" lang=\"en\"> <![endif]-->\n<!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\"> <!--<![endif]-->\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"Description\"\n        content=\"AngularJS is what HTML would have been, had it been designed for building web-apps.\n                 Declarative templates with data-binding, MVW, MVVM, MVC, dependency injection and great\n                 testability story all implemented with pure client-side JavaScript!\">\n  <title>AngularJS — Superheroic JavaScript MVW Framework</title>\n  <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n  <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n  <link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\n  <link rel=\"stylesheet\" href=\"css/docs.css\">\n  <link rel=\"stylesheet\" href=\"css/font-awesome.css\">\n  <link href=\"google-code-prettify/prettify.css\" type=\"text/css\" rel=\"stylesheet\">\n  <base href=\"/\">\n\n  ﻿<!--[if lte IE 8]>\n    <script>\n      document.createElement('tabs');\n      document.createElement('pane');\n      document.createElement('ng-pluralize');\n    </script>\n  <![endif]-->\n  <script>\n    /*!\n      * $script.js Async loader & dependency manager\n      * https://github.com/ded/script.js\n      * (c) Dustin Diaz, Jacob Thornton 2011\n      * License: MIT\n      */\n    (function(a,b){typeof module!=\"undefined\"?module.exports=b():typeof define==\"function\"&&define.amd?define(a,b):this[a]=b()})(\"$script\",function(){function q(a,b,c){for(c=0,j=a.length;c<j;++c)if(!b(a[c]))return k;return 1}function r(a,b){q(a,function(a){return!b(a)})}function s(a,b,i){function o(a){return a.call?a():d[a]}function p(){if(!--n){d[m]=1,k&&k();for(var a in f)q(a.split(\"|\"),o)&&!r(f[a],o)&&(f[a]=[])}}a=a[l]?a:[a];var j=b&&b.call,k=j?b:i,m=j?a.join(\"\"):b,n=a.length;return setTimeout(function(){r(a,function(a){if(h[a])return m&&(e[m]=1),h[a]==2&&p();h[a]=1,m&&(e[m]=1),t(!c.test(a)&&g?g+a+\".js\":a,p)})},0),s}function t(c,d){var e=a.createElement(\"script\"),f=k;e.onload=e.onerror=e[p]=function(){if(e[n]&&!/^c|loade/.test(e[n])||f)return;e.onload=e[p]=null,f=1,h[c]=2,d()},e.async=1,e.src=c,b.insertBefore(e,b.firstChild)}var a=document,b=a.getElementsByTagName(\"head\")[0],c=/^https?:\\/\\//,d={},e={},f={},g,h={},i=\"string\",k=!1,l=\"push\",m=\"DOMContentLoaded\",n=\"readyState\",o=\"addEventListener\",p=\"onreadystatechange\";return!a[n]&&a[o]&&(a[o](m,function u(){a.removeEventListener(m,u,k),a[n]=\"complete\"},k),a[n]=\"loading\"),s.get=t,s.order=function(a,b,c){(function d(e){e=a.shift(),a.length?s(e,d):s(e,b,c)})()},s.path=function(a){g=a},s.ready=function(a,b,c){a=a[l]?a:[a];var e=[];return!r(a,function(a){d[a]||e[l](a)})&&q(a,function(a){return d[a]})?b():!function(a){f[a]=f[a]||[],f[a][l](b),c&&c(e)}(a.join(\"|\")),s},s})\n\n\n    var _gaq=[\n      ['_setAccount','UA-8594346-3'],\n      ['_setDomainName', '.angularjs.org'],\n      ['_trackPageview'],['_trackPageLoadTime']\n    ];\n\n    $script('https://apis.google.com/js/plusone.js');\n    $script(('https:'==location.protocol?'//ssl':'http://www')+'.google-analytics.com/ga.js');\n    $script(\"//platform.twitter.com/widgets.js\");\n\n    $script('http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js', function() {\n      $script('js/bootstrap.min.js', function() {\n        $().dropdown();\n        bootstrap();\n      });\n      $script('google-code-prettify/prettify.min.js', bootstrap);\n      $script('js/homepage.js', bootstrap);\n      $script('http://ajax.googleapis.com/ajax/libs/angularjs/1.0.4/angular.min.js', bootstrap);\n      $script('http://ajax.googleapis.com/ajax/libs/angularjs/1.0.4/angular-resource.min.js', bootstrap);\n      $script('http://code.angularjs.org/1.0.4/i18n/angular-locale_sk.js', function() {\n        angular.module('ngLocal.sk', [])._invokeQueue.push(angular.module('ngLocale')._invokeQueue[0]);\n        bootstrap();\n      });\n      $script('http://code.angularjs.org/1.0.4/i18n/angular-locale_en-us.js', function() {\n        angular.module('ngLocal.us', [])._invokeQueue.push(angular.module('ngLocale')._invokeQueue[0]);\n        bootstrap();\n      });\n    });\n\n    function bootstrap() {\n      if (window.prettyPrint && window.$ && $.fn.popover && angular.bootstrap &&\n          hasModule('ngLocal.sk') && hasModule('ngLocal.us') && hasModule('homepage') && hasModule('ngResource')) {\n            $(function(){\n              angular.bootstrap(document, ['homepage', 'ngLocal.us']);\n            });\n      }\n    }\n\n    function hasModule(moduleName) {\n      try {\n        return angular.module(moduleName);\n      } catch (e) {\n        return false;\n      }\n    }\n  </script>\n  <script>\n    /*\n    AngularJS v1.0.4\n    (c) 2010-2012 Google, Inc. http://angularjs.org\n    License: MIT\n    */\n    (function(i){'use strict';function d(c,b,e){return c[b]||(c[b]=e())}return d(d(i,\"angular\",Object),\"module\",function(){var c={};return function(b,e,f){e&&c.hasOwnProperty(b)&&(c[b]=null);return d(c,b,function(){function a(a,b,d){return function(){c[d||\"push\"]([a,b,arguments]);return g}}if(!e)throw Error(\"No module: \"+b);var c=[],d=[],h=a(\"$injector\",\"invoke\"),g={_invokeQueue:c,_runBlocks:d,requires:e,name:b,provider:a(\"$provide\",\"provider\"),factory:a(\"$provide\",\"factory\"),service:a(\"$provide\",\"service\"),\n      value:a(\"$provide\",\"value\"),constant:a(\"$provide\",\"constant\",\"unshift\"),filter:a(\"$filterProvider\",\"register\"),controller:a(\"$controllerProvider\",\"register\"),directive:a(\"$compileProvider\",\"directive\"),config:h,run:function(a){d.push(a);return this}};f&&h(f);return g})}})})(window);\n  </script>\n</head>\n<body  ng-controller=\"DownloadCtrl\">\n  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you support IE 6.\n       chromium.org/developers/how-tos/chrome-frame-getting-started -->\n  <!--[if lt IE 7]><p class=chromeframe>Your browser is <em>ancient!</em> <a href=\"http://browsehappy.com/\">Upgrade to a different browser</a> or <a href=\"http://www.google.com/chromeframe/?redirect=true\">install Google Chrome Frame</a> to experience this site.</p><![endif]-->\n  <header class=\"header\">\n    <div class=\"navbar navbar-fixed-top\">\n      <div class=\"navbar-inner\">\n        <div class=\"container\">\n          <a class=\"brand\" href=\"http://angularjs.org\" style=\"padding-top: 6px; padding-bottom: 0px;\">\n            <img class=\"AngularJS-small\" src=\"img/AngularJS-small.png\">\n          </a>\n          <ul class=\"nav\">\n            <li class=\"divider-vertical\"></li>\n            <li class=\"active\"><a href=\"http://angularjs.org/\"><i class=\"icon-home icon-white\"></i> Home</a></li>\n            <li class=\"divider-vertical\"></li>\n            <li class=\"dropdown\">\n              <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                <i class=\"icon-eye-open icon-white\"></i> Learn <b class=\"caret\"></b>\n              </a>\n              <ul class=\"dropdown-menu\">\n                <li class=\"disabled\"><a href=\"\">Home</a></li>\n                <li><a href=\"http://www.youtube.com/user/angularjs\">Videos</a></li>\n                <li><a href=\"http://docs.angularjs.org/tutorial\">Tutorial</a></li>\n                <li><a href=\"http://builtwith.angularjs.org\">Case Studies</a></li>\n                <li><a href=\"https://github.com/angular/angular-seed\">Seed App project template</a></li>\n                <li><a href=\"http://docs.angularjs.org/misc/faq\">FAQ</a></li>\n              </ul>\n            </li>\n            <li class=\"divider-vertical\"></li>\n            <li class=\"dropdown\">\n              <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                <i class=\"icon-book icon-white\"></i> Develop <b class=\"caret\"></b>\n              </a>\n              <ul class=\"dropdown-menu\">\n                <li><a href=\"http://docs.angularjs.org/tutorial\">Tutorial</a></li>\n                <li><a href=\"http://docs.angularjs.org/guide/\">Developer Guide</a></li>\n                <li><a href=\"http://docs.angularjs.org/api/\">API Reference</a></li>\n                <li><a href=\"http://docs.angularjs.org/misc/contribute\">Contribute</a></li>\n                <li><a href=\"http://code.angularjs.org/\">Download</a></li>\n              </ul>\n            </li>\n            <li class=\"divider-vertical\"></li>\n            <li class=\"dropdown\">\n              <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                <i class=\"icon-comment icon-white\"></i> Discuss <b class=\"caret\"></b>\n              </a>\n              <ul class=\"dropdown-menu\">\n                <li><a href=\"http://blog.angularjs.org\">Blog</a></li>\n                <li><a href=\"http://groups.google.com/group/angular\">Mailing List</a></li>\n                <li><a href=\"http://webchat.freenode.net/?channels=angularjs&uio=d4\">Chat Room</a></li>\n                <li class=\"divider\"></li>\n                <li><a href=\"https://twitter.com/#!/angularjs\">Twitter</a></li>\n                <li><a href=\"https://plus.google.com/110323587230527980117\">Google+</a></li>\n                <li class=\"divider\"></li>\n                <li><a href=\"https://github.com/angular/angular.js\">GitHub</a></li>\n                <li><a href=\"https://github.com/angular/angular.js/issues\">Issue Tracker</a></li>\n              </ul>\n            </li>\n            <li class=\"divider-vertical\"></li>\n          </ul>\n          <form class=\"navbar-search pull-right\" method=\"GET\" action=\"https://www.google.com/search\">\n            <input type=\"text\" name=\"as_q\" class=\"search-query\" placeholder=\"Search\">\n            <input type=\"hidden\" name=\"as_sitesearch\" value=\"angularjs.org\">\n          </form>\n        </div>\n      </div>\n    </div>\n  </header>\n\n  <div role=\"main\" class=\"container\">\n\n    <div class=\"row\" style=\"padding-top: 80px;\">\n      <div class=\"span12\">\n\n        <div class=\"hero-unit\" style=\"height: 350px;\">\n          <div class=\"center\">\n            <img class=\"AngularJS-large\" src=\"img/AngularJS-large.png\">\n          </div>\n          <div class=\"center\">\n            <h1>HTML enhanced for web apps!</h1>\n          </div>\n          <div class=\"center\">\n            <a class=\"btn btn-large\" href=\"https://github.com/angular/angular.js\">\n              <i class=\"icon-github-sign\"></i> View on GitHub\n            </a>\n            <span class=\"spacer\"></span>\n\n            <a class=\"btn btn-large btn-primary\" href=\"\" ng-click=\"lightbox('stable')\">\n              <i class=\"icon-download-alt icon-large\"></i> Download\n              <span class=\"version\"> (<span>1.0.4/1.1.2</span>) </span>\n            </a>\n\n          </div>\n          <ul class='quick-links'>\n            <li class=\"google-follow\">\n              Follow +AngularJS on\n              <a href=\"https://plus.google.com/110323587230527980117?prsrc=3\" rel=\"publisher\" style=\"text-decoration:none;\"><img src=\"https://ssl.gstatic.com/images/icons/gplus-32.png\" alt=\"\" style=\"border:0;width:20px;height:20px;\"/></a>\n            </li>\n            <li style=\"width: 120px; height: 25px;\">\n              <g:plusone size=\"medium\" annotation=\"inline\" width=\"120\" href=\"http://angularjs.org\"></g:plusone>\n            </li>\n            <li style=\"width: 220px; height: 25px;\">\n              <a href=\"https://twitter.com/angularjs\" class=\"twitter-follow-button\" data-show-count=\"true\">Follow @angularjs</a>\n            </li>\n            <li style=\"width: 107px; height: 25px;\">\n              <a href=\"https://twitter.com/share\" class=\"twitter-share-button\"\n                 data-url=\"http://angularjs.org\" data-text=\"AngularJS - HTML Enhanced for Web Apps\" data-via=\"angularjs\">Tweet</a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row first\">\n      <div class=\"span4\">\n        <h1>Why AngularJS?</h1>\n        <p>\n          HTML is great for declaring static documents, but it falters when we try to use it for\n          declaring dynamic views in web-applications. AngularJS lets you extend HTML vocabulary\n          for your application. The resulting environment is extraordinarily expressive, readable,\n          and quick to develop.\n        </p>\n      </div>\n      <div class=\"span4\">\n        <h1>Alternatives</h1>\n        <p>\n          Other frameworks deal with HTML’s shortcomings by either abstracting away HTML, CSS,\n          and/or JavaScript or by providing an imperative way for manipulating the DOM. Neither of\n          these address the root problem that HTML was not designed for dynamic views.\n        </p>\n      </div>\n      <div class=\"span4\">\n        <h1>Extensibility</h1>\n        <p>\n          AngularJS is a toolset for building the framework most suited to your application\n          development. It is fully extensible and works well with other libraries. Every feature\n          can be modified or replaced to suit your unique development workflow and feature needs.\n          Read on to find out how.\n        </p>\n      </div>\n    </div>\n\n    <h1 id=\"the-basics\">The Basics</h1>\n    <div class=\"row example\">\n      <div class=\"span8 app-source\" app-source=\"hello.html\" annotate=\"hello.annotation\"></div>\n      <div class=\"span4\">\n        <span hint></span>\n        <span class=\"pull-right\" js-fiddle=\"hello.html\"></span>\n        <div class=\"tabs-spacer\"></div>\n        <div app-run=\"hello.html\" class=\"well\"></div>\n        <h3>Watch as we build this app</h3>\n        <div class=\"video-img\" data-toggle=\"modal\" data-video=\"http://www.youtube.com/embed/uFTFsKmkQnQ?&autoplay=1\" href=\"#videoModal\">\n          <img class=\"video\" src=\"img/video.png\">\n        </div>\n      </div>\n    </div>\n\n\n\n    <h1 id=\"add-some-control\">Add Some Control</h1>\n    <div class=\"row\">\n      <div class=\"span4\">\n        <h3>Data Binding</h3>\n        <p>\n          Data-binding is an automatic way of updating the view whenever the model changes, as\n          well as updating the model whenever the view changes. This is awesome because it\n          eliminates DOM manipulation from the list of things you have to worry about.\n        </p>\n      </div>\n      <div class=\"span4\">\n        <h3>Controller</h3>\n        <p>\n          Controllers are the behavior behind the DOM elements. AngularJS lets you express the\n          behavior in a clean readable form without the usual boilerplate of updating the DOM,\n          registering callbacks or watching model changes.\n        </p>\n      </div>\n      <div class=\"span4\">\n        <h3>Plain JavaScript</h3>\n        <p>\n          Unlike other frameworks, there is no need to inherit from proprietary types; to wrap the\n          model in accessors methods. Just plain old JavaScript here. This makes your code easy to\n          test, maintain, reuse, and again free from boilerplate.\n        </p>\n      </div>\n    </div>\n    <div class=\" row example\">\n      <div class=\"span8 app-source\" app-source=\"todo.html todo.js todo.css\" annotate=\"todo.annotation\"></div>\n      <div class=\"span4\">\n        <span hint></span>\n        <span class=\"pull-right\" js-fiddle=\"todo.html todo.js todo.css\"></span>\n        <div class=\"tabs-spacer\"></div>\n        <div app-run=\"todo.html\" class=\"well\"></div>\n        <h3>Watch as we build this app</h3>\n        <div class=\"video-img\" data-toggle=\"modal\" data-video=\"http://www.youtube.com/embed/WuiHuZq_cg4?&autoplay=1\" href=\"#videoModal\">\n          <img class=\"video\" src=\"img/video.png\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"modal hide fade\" style=\"display: none;\" id=\"videoModal\">\n      <div class=\"modal-header\">\n        <a class=\"close\" data-dismiss=\"modal\">×</a>\n        <h3>AngularJS Todo Tutorial</h3>\n      </div>\n      <div class=\"modal-body\">\n      </div>\n    </div>\n\n\n    <h1 id=\"wire-up-a-backend\">Wire up a Backend</h1>\n    <div class=\"row\">\n      <div class=\"span4\">\n        <h3>Deep Linking</h3>\n        <p>\n          A deep link reflects where the user is in the app, this is useful so users can bookmark\n          and email links to locations within apps. Round trip apps get this automatically, but\n          AJAX apps by their nature do not. AngularJS combines the benefits of deep link with\n          desktop app-like behavior.\n        </p>\n      </div>\n      <div class=\"span4\">\n        <h3>Form Validation</h3>\n        <p>\n          Client-side form validation is an important part of great user experience.\n          AngularJS lets you declare the validation rules of the form without having to write\n          JavaScript code. Write less code, go have beer sooner.\n        </p>\n      </div>\n      <div class=\"span4\">\n        <h3>Server Communication</h3>\n        <p>\n          AngularJS provides services on top of XHR, that dramatically simplify your code. We wrap\n          XHR to give you exception management and promises. Promises further simplify your code\n          by handling asynchronous return of data. This lets you assign properties synchronously\n          when the return is actually asynchronous.\n        </p>\n      </div>\n    </div>\n    <div class=\" row example\">\n      <div class=\"span8 app-source\" app-source=\"project.html project.js list.html detail.html mongolab.js\" resource=\"resource\" annotate=\"project.annotation\" module=\"project\"></div>\n      <div class=\"span4\">\n        <span hint></span>\n        <span class=\"pull-right\" js-fiddle=\"project.html list.html detail.html project.js mongolab.js\" resource=\"resource\" module=\"project\"></span>\n        <div class=\"tabs-spacer\"></div>\n        <!--[if lt IE 10]>\n          <div class=\"alert alert-error\">\n            Your browser doesn't support <a href=\"http://www.w3.org/TR/cors/\">CORS</a>, therefore\n            it can not fetch data from an external domain resulting in no projects shown in this example.\n          </div>\n        <![endif]-->\n        <div app-run=\"project.html\" module=\"project\" class=\"well\"></div>\n      </div>\n    </div>\n\n\n\n    <h1 id=\"create-components\">Create Components</h1>\n    <div class=\"row\">\n      <div class=\"span4\">\n        <h3>Directives</h3>\n        <p>\n          Directives is a unique and powerful feature available only in Angular. Directives let\n          you invent new HTML syntax, specific to your application.\n        </p>\n      </div>\n      <div class=\"span4\">\n        <h3>Reusable Components</h3>\n        <p>\n          We use directives to create reusable components. A component allows you to hide complex\n          DOM structure, CSS, and behavior. This lets you focus either on what the application\n          does or how the application looks separately.\n        </p>\n      </div>\n      <div class=\"span4\">\n        <h3>Localization</h3>\n        <p>\n          An important part of serious apps is localization. Angular's locale aware filters and\n          stemming directives give you building blocks to make your application available in all\n          locales.\n        </p>\n      </div>\n    </div>\n    <div class=\" row example\">\n      <div class=\"span8 app-source\" app-source=\"tabs.html components.js beers.js\" annotate=\"tabs.annotation\" module=\"components\"></div>\n      <div class=\"span4\">\n        <span hint></span>\n        <span class=\"pull-right\" js-fiddle=\"tabs.html components.js beers.js\" module=\"components\"></span>\n        <div class=\"tabs-spacer\"></div>\n        <h4>Locale: US</h4>\n        <div app-run=\"tabs.html\" module=\"components-us\" class=\"well\"></div>\n        <div class=\"tabs-spacer\"></div>\n        <h4>Locale: SK</h4>\n        <div app-run=\"tabs.html\" module=\"components-sk\" class=\"well\"></div>\n      </div>\n    </div>\n\n\n\n    <h1 id=\"embed-and-inject\">Embed and Inject</h1>\n    <div class=\"row\">\n      <div class=\"span4\">\n        <h3>Embeddable</h3>\n        <p>\n          AngularJS works great with other technologies. Add as much or as little of AngularJS to\n          an existing page as you like. Many other frameworks require full commitment. This page\n          has multiple AngularJS applications embedded in it. Because AngularJS has no global\n          state multiple apps can run on a single page without the use of <code>iframe</code>s. We\n          encourage you to view-source and look around.\n        </p>\n      </div>\n      <div class=\"span4\">\n        <h3>Injectable</h3>\n        <p>\n          The dependency injection in AngularJS allows you to declaratively describe how your\n          application is wired. This means that your application needs no <code>main()</code>\n          method which is usually an unmaintainable mess. Dependency injection is also a core to\n          AngularJS. This means that any component which does not fit your needs can easily be\n          replaced.\n        </p>\n      </div>\n      <div class=\"span4\">\n        <h3>Testable</h3>\n        <p>\n          AngularJS was designed from ground up to be testable. It encourages behavior-view\n          separation, comes pre-bundled with mocks, and takes full advantage of dependency\n          injection. It also comes with end-to-end scenario runner which eliminates test flakiness\n          by understanding the inner workings of AngularJS.\n        </p>\n      </div>\n    </div>\n    <div class=\"spacer\"></div>\n  </div>\n\n  <footer class=\"footer\">\n    <div class=\"container\">\n      <p class=\"pull-right\"><a href=\"#\" target=\"_self\">Back to top</a></p>\n      <p>Super-powered by Google  ©2010-2012</p>\n      <p>Code licensed under the\n        <a href=\"https://github.com/angular/angular.js/blob/master/LICENSE\" target=\"_blank\">The\n          MIT License</a>. Documentation licensed under <a\n            href=\"http://creativecommons.org/licenses/by/3.0/\">CC BY 3.0</a>.\n      </p>\n    </div>\n  </footer>\n\n  <!-- JavaScript at the bottom for fast page loading -->\n  <!-- end scripts -->\n\n  <div class=\"hello-code\">\n    <!-- ============== Hello ============== -->\n\n    <script type=\"text/ng-template\" id=\"hello.html\">\n      <div>\n        <label>Name:</label>\n        <input type=\"text\" ng-model=\"yourName\" placeholder=\"Enter a name here\">\n        <hr>\n        <h1>Hello {{yourName}}!</h1>\n      </div>\n    </script>\n    <script type=\"text/ng-template\" id=\"hello.annotation\">\n      { \"hello.html\":\n          { \"ng-app\": \"Tells AngularJS to be active in this portion of the page. In this case the entire document.\"\n          , \"angular.min.js\": \"Load AngularJS.\"\n          , \"ng-model\": \"This links the form and the model. This means that any changes to the control update the data in your model, and when you change the model it updates the control. Try it! Type in the control and see it update below.\"\n          , \"{{yourName}}\": \"The <code>{{ }}</code> are a declarative way of specifying data binding locations in the HTML. AngularJS will automatically update this text whenever the <code>yourName</code> property changes.\"\n          }\n      }\n    </script>\n  </div>\n  <div class=\"todo-code\">\n    <!-- ============== TODO ============== -->\n    <style type=\"text/css\" id=\"todo.css\">\n      .done-true {\n        text-decoration: line-through;\n        color: grey;\n      }\n    </style>\n    <script id=\"todo.js\">\n      function TodoCtrl($scope) {\n        $scope.todos = [\n          {text:'learn angular', done:true},\n          {text:'build an angular app', done:false}];\n\n        $scope.addTodo = function() {\n          $scope.todos.push({text:$scope.todoText, done:false});\n          $scope.todoText = '';\n        };\n\n        $scope.remaining = function() {\n          var count = 0;\n          angular.forEach($scope.todos, function(todo) {\n            count += todo.done ? 0 : 1;\n          });\n          return count;\n        };\n\n        $scope.archive = function() {\n          var oldTodos = $scope.todos;\n          $scope.todos = [];\n          angular.forEach(oldTodos, function(todo) {\n            if (!todo.done) $scope.todos.push(todo);\n          });\n        };\n      }\n    </script>\n    <script type=\"text/ng-template\" id=\"todo.html\">\n      <h2>Todo</h2>\n      <div ng-controller=\"TodoCtrl\">\n        <span>{{remaining()}} of {{todos.length}} remaining</span>\n        [ <a href=\"\" ng-click=\"archive()\">archive</a> ]\n        <ul class=\"unstyled\">\n          <li ng-repeat=\"todo in todos\">\n            <input type=\"checkbox\" ng-model=\"todo.done\">\n            <span class=\"done-{{todo.done}}\">{{todo.text}}</span>\n          </li>\n        </ul>\n        <form ng-submit=\"addTodo()\">\n          <input type=\"text\" ng-model=\"todoText\"  size=\"30\"\n                 placeholder=\"add new todo here\">\n          <input class=\"btn-primary\" type=\"submit\" value=\"add\">\n        </form>\n      </div>\n    </script>\n    <script type=\"text/ng-template\" id=\"todo.annotation\">\n      { \"todo.html\":\n        { \"ng-app\": \"Tells AngularJS to be active in this portion of the page. In this case the entire document.\"\n        , \"angular.min.js\": \"Load AngularJS.\"\n        , \"todo.js\": \"Your behavior lives in JavaScript controllers.\"\n        , \"ng-controller\": \"The behavior of content under this element will be managed using the <code>TodoCtrl</code> class defined in <code>todo.js</code>.\"\n        , \"{{remaining()}}\": \"The <code>{{ }}</code> are a declarative way of specifying data binding locations in the HTML. AngularJS will automatically update this text whenever the <code>remaining()</code> function return value changes.\"\n        , \"ng-click\": \"Instead of registering event-handlers, you declare which method on the controller to call. Here clicking the link will call <code>archive()</code> method.\"\n        , \"ng-repeat\": \"Use <code>ng-repeat</code> to unroll a collection. Here, for every object in <code>todos</code>, AngularJS will create new copy of the <code>&lt;li&gt;</code> element. When objects are added to the <code>todos</code> collection the <code>ng-repeat</code> automatically adds new <code>&lt;li&gt;</code> elements into the DOM. Similarly when the objects are removed from <code>todos</code> then the corresponding <code>&lt;li&gt;</code> element is removed as well. This is one of the most versatile directives in AngularJS.\"\n        , \"ng-model\": \"This links the form and the model. This means that any changes to the control update the data in your model, and when you change the model it updates the control. AngularJS automatically copies the state of the checkbox into <code>todo.done</code>. Conversely, if you update <code>todo.done</code> you will see the checkbox respond accordingly.\"\n        , \"{{todo.done}}\": \"To show strikethroughs for completed tasks we have created a CSS class <code>done-true</code>. When the <code>todo.done</code> is <code>true</code> the resulting CSS selector is <code>done-true</code> which then applies the strikethrough.\"\n        , \"ng-submit\": \"Intercepts form submission and instead calls <code>addTodo()</code>. Inside this method we read the <code>todoText</code> property and insert it into the <code>todos</code> collection.\"\n        }\n\n      , \"todo.css\":\n        { \".done-true\": \"Add strikethrough decoration when the task is done.\"\n        }\n\n      , \"todo.js\":\n        { \"TodoCtrl\": \"The controller is the code behind the view. You can clearly see your application behavior because there is no DOM manipulation or framework specific boilerplate. Just simple, readable JavaScript.\"\n        , \"$scope\": \"<code>$scope</code> contains your model data. It is the glue between the controller and the view. The <code>$scope</code> is just one of the services that can be injected into the controller.\"\n        , \"todos\": \"We are creating the model with two initial todo items. Notice that a you simply assign your model to the <code>$scope</code> and AngularJS reflects the state in the UI automatically. The model data is a Plain-Old-JavaScript-Object no need to wrap it in proxy or accesses the property through special setter methods.\"\n        , \"addTodo\": \"We are assigning the behavior into the <code>$scope</code> so that the <code>ng-click</code> can invoke it.\"\n        , \"push\": \"This is unmodified <code>Array.push</code> method. Calling it updates the model, which then updates the view through data-binding. The <code>ng&ndash;repeat</code> is bound to this array. It automatically unrolls the array and adds the new DOM element into the view. (see <code>ng&ndash;repeat</code> in <code>index.html</code> tab.)\"\n        , \"todoText\": \"Because of  bi-directional data-binding, the model is always up to date. This means that we can simply read the state of the user input. No need for registering callbacks, event listeners or using framework dependent API.\"\n        , \"''\": \"Writing to the form controls is just as easy. The data-binding will clear the control for us.\"\n        , \"remaining\": \"This is a computed property. No need to define its dependencies or worry about when it needs to be updated.\"\n        , \"[]\": \"You can replace the model with new instance at any time, without doing any special model listener registration.\"\n        }\n      }\n    </script>\n  </div>\n  <div class=\"project-code\">\n    <!-- ============== Projects ============== -->\n    <style type=\"text/css\" id=\"project.css\">\n      table { text-align: left; }\n      table td, table th {\n        vertical-align: top;\n        padding: 0 .25em;\n      }\n    </style>\n    <script id=\"mongolab.js\">\n      // This is a module for cloud persistance in mongolab - https://mongolab.com\n      angular.module('mongolab', ['ngResource']).\n          factory('Project', function($resource) {\n            var Project = $resource('https://api.mongolab.com/api/1/databases' +\n                '/angularjs/collections/projects/:id',\n                { apiKey: '4f847ad3e4b08a2eed5f3b54' }, {\n                  update: { method: 'PUT' }\n                }\n            );\n\n            Project.prototype.update = function(cb) {\n              return Project.update({id: this._id.$oid},\n                  angular.extend({}, this, {_id:undefined}), cb);\n            };\n\n            Project.prototype.destroy = function(cb) {\n              return Project.remove({id: this._id.$oid}, cb);\n            };\n\n            return Project;\n          });\n    </script>\n    <script id=\"project.js\">\n      angular.module('project', ['mongolab']).\n        config(function($routeProvider) {\n          $routeProvider.\n            when('/', {controller:ListCtrl, templateUrl:'list.html'}).\n            when('/edit/:projectId', {controller:EditCtrl, templateUrl:'detail.html'}).\n            when('/new', {controller:CreateCtrl, templateUrl:'detail.html'}).\n            otherwise({redirectTo:'/'});\n        });\n\n\n      function ListCtrl($scope, Project) {\n        $scope.projects = Project.query();\n      }\n\n\n      function CreateCtrl($scope, $location, Project) {\n        $scope.save = function() {\n          Project.save($scope.project, function(project) {\n            $location.path('/edit/' + project._id.$oid);\n          });\n        }\n      }\n\n\n      function EditCtrl($scope, $location, $routeParams, Project) {\n        var self = this;\n\n        Project.get({id: $routeParams.projectId}, function(project) {\n          self.original = project;\n          $scope.project = new Project(self.original);\n        });\n\n        $scope.isClean = function() {\n          return angular.equals(self.original, $scope.project);\n        }\n\n        $scope.destroy = function() {\n          self.original.destroy(function() {\n            $location.path('/list');\n          });\n        };\n\n        $scope.save = function() {\n          $scope.project.update(function() {\n            $location.path('/');\n          });\n        };\n      }\n    </script>\n    <script type=\"text/ng-template\" id=\"project.html\">\n      <h2>JavaScript Projects</h2>\n      <div ng-view></div>\n    </script>\n    <script type=\"text/ng-template\" id=\"list.html\">\n      <input type=\"text\" ng-model=\"search\" class=\"search-query\" placeholder=\"Search\">\n      <table>\n        <thead>\n        <tr>\n          <th>Project</th>\n          <th>Description</th>\n          <th><a href=\"#/new\"><i class=\"icon-plus-sign\"></i></a></th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr ng-repeat=\"project in projects | filter:search | orderBy:'name'\">\n          <td><a href=\"{{project.site}}\" target=\"_blank\">{{project.name}}</a></td>\n          <td>{{project.description}}</td>\n          <td>\n            <a href=\"#/edit/{{project._id.$oid}}\"><i class=\"icon-pencil\"></i></a>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </script>\n    <script type=\"text/ng-template\" id=\"detail.html\">\n      <form name=\"myForm\">\n        <div class=\"control-group\" ng-class=\"{error: myForm.name.$invalid}\">\n          <label>Name</label>\n          <input type=\"text\" name=\"name\" ng-model=\"project.name\" required>\n          <span ng-show=\"myForm.name.$error.required\" class=\"help-inline\">\n              Required</span>\n        </div>\n\n        <div class=\"control-group\" ng-class=\"{error: myForm.site.$invalid}\">\n          <label>Website</label>\n          <input type=\"url\" name=\"site\" ng-model=\"project.site\" required>\n          <span ng-show=\"myForm.site.$error.required\" class=\"help-inline\">\n              Required</span>\n          <span ng-show=\"myForm.site.$error.url\" class=\"help-inline\">\n              Not a URL</span>\n        </div>\n\n        <label>Description</label>\n        <textarea name=\"description\" ng-model=\"project.description\"></textarea>\n\n        <br>\n        <a href=\"#/\" class=\"btn\">Cancel</a>\n        <button ng-click=\"save()\" ng-disabled=\"isClean() || myForm.$invalid\"\n                class=\"btn btn-primary\">Save</button>\n        <button ng-click=\"destroy()\"\n                ng-show=\"project._id\" class=\"btn btn-danger\">Delete</button>\n      </form>\n    </script>\n    <script type=\"text/ng-template\" id=\"project.annotation\">\n    { \"project.html\":\n       { \"ng-app\": \"Tells AngularJS to be active in this portion of the page. In this case the entire document.\"\n       , \"project\": \"The <code>ng-app</code> activates the <code>project</code> module for this page region. This lets you have modules that run in different parts of the page.\"\n       , \"angular.min.js\": \"Load AngularJS.\"\n       , \"angular-resource.min.js\": \"Load AngularJS resource module.\"\n       , \"project.js\": \"The <code>project.js</code> file contains the controllers which specify your application’s behavior.\"\n       , \"mongolab.js\": \"An AngularJS module definition to connect this application to <code>http://mongolab.com</code> for its data storage.\"\n       , \"ng-view\": \"We’re marking this <code>&lt;div&gt;</code> as the place we’ll load partial pages or “views”. The surrounding page will stay static while we load changing UI into this section. In this case, we’ll be switching between a list of “projects” and the form to add new or edit existing “projects”.\"\n       }\n     , \"project.js\":\n       { \"project\": \"This defines the <code>project</code> module. You use modules to configure existing services, and define new services, directives, filters, and so on. Here, we’ll set up ‘routes’ that map URLs to partials. AngularJS watches the browser location and automatically updates the partial when the URL changes.\"\n       , \"mongolab\": \"Modules can depend on other modules. Here, <code>project</code> needs <code>mongolab</code> which handles the persistence for this application.\"\n       , \"config\": \"You use <code>config()</code> to configure existing services. Here, we’re configuring the <code>$routeProvider</code> responsible for mapping URL paths to partials.\"\n       , \"when\": \"When the URL is <code>/</code> it will load <code>list.html</code> into the view and attach the <code>ListCtrl</code> controller. You can instantly get an overview of an app's structure by reading the route definitions.\"\n       , \"/edit/:projectId\": \"This route definition has a colon ':' in it. You use colons to make a component of the URL available to your controller. So now, <code>EditCtrl</code> can refer to the <code>projectId</code> property which tells it which project to edit.\"\n       , \"otherwise\": \"The <code>otherwise</code> route specifies which view to display when the URL doesn’t match any of the explicit routes. It’s the default.\"\n       , \"Project\": \"<code>Project</code> is a class for persisting and accessing the application data. It is defined in the <code>mongolab.js</code> module and it is automatically injected for us into the controller. Its purpose is to abstract the server communication. This lets the controller focus on the behavior rather than the complexities of server access.\"\n       , \"query\": \"The <code>query</code> method requests a list of <code>Project</code>s from the server. Notice that though this is an asynchronous server call, we get to write it as if it were synchronous with no callback. This is super cool! What's going on here is that <code>query</code> returns something called a promise.  When the data eventually returns from the server to fulfill the promise, AngularJS's data binding will automatically update anywhere where we've used it.\"\n       , \"$location\": \"You use the <code>$location</code> service to access the browser's location.\"\n       , \"path\": \"Use the <code>path</code> method to change the application's 'deep-linking' location. Changing the URL will automatically activate the new route, and transition the application to display that view -- in this case, the <code>/edit/</code> view.\"\n       , \"$routeParams\": \"Here, we ask AngularJS to inject the <code>$routeParams</code> service.  We use it to access the parameters extracted from the route path definitions.\"\n       , \"projectId\": \"This extracts the <code>projectId</code> from the URL. This allows the controller to use deep-linking information for processing.\"\n       , \"original\": \"We save the original copy of the <code>Project</code> so that we can determine if the user has modified the form.\"\n       , \"isClean\": \"Determines whether the user has modified the form. We use this information to enable the save button in the view.\"\n       , \"destroy\": \"Called when the user clicks the delete button in the view.\"\n       , \"save\": \"Called when the user clicks the save button in the view.\"\n       }\n     , \"list.html\":\n       { \"ng-model\": \"Bind the input field to the <code>search</code> property. The property is then used to filter for only the projects which contain the text entered by the user.\"\n       , \"#/new\": \"A link to a <code>/new</code> route defined in <code>projects.js</code>. Note that we follow the spirit of the web. There is no need to register callbacks on links, we are simply navigating to a new URL. This automatically updates the browser history, and enables deep-linking. But unlike a server round trip application, this navigation event gets rendered instantly in the browser.\"\n       , \"ng-repeat\": \"Use <code>ng-repeat</code> to unroll a collection. Here, for every project in <code>projects</code>, AngularJS will create new copy of the <code>&lt;tr&gt;</code> element.\"\n       , \"filter\": \"The <code>filter</code> uses the <code>search</code> to return only a subset of items in the <code>projects</code> array. As you enter text into the search box, the <code>filter</code> will narrow down the list according to your criteria. <code>ng-repeat</code> will then add or remove items from the table.\"\n       , \"orderBy\": \"Returns the <code>project</code> list ordered by <code>name</code> property.\"\n       , \"#/edit/{{project._id.$oid}}\": \"Creates individual edit links, by embedding the project id into the URL. The embedded project id serves the purpose of deep-linking, back button, as well as a way to communicate to <code>EditCtrl</code> which project should be edited.\"\n       }\n     , \"detail.html\":\n       { \"myForm\": \"Create a form named <code>myForm</code>. We will declare form validation rules here which we'll use to show input errors and disable buttons.\"\n       , \"ng-class\": \"Add an <code>error</code> CSS class when the <code>myForm</code>'s input <code>name</code> is invalid.\"\n       , \"required\": \"Invalidate the input control when no text is entered.\"\n       , \"ng-show\": \"Show this error message when the <code>myForm</code>'s input <code>name</code> has <code>required</code> validation error.\"\n       , \"url\": \"The URL type automatically adds URL validation.\"\n       , \"ng-disabled\": \"Disable the 'Save' button when the form has not been filled in or is invalid.\"\n       }\n     , \"mongolab.js\":\n       { \"'mongolab'\": \"Declares the <code>mongolab</code> module. You use modules to configure existing services, and define new services, directives, filters, and so on. Here, we’ll set up <code>Project</code> class to abstract server communication.\"\n       , \"'ngResource'\": \"We depend on AngularJS <code>ngResource</code> module which provides a generic interface to RESTful services.\"\n       , \"factory\": \"Use the module's <code>factory</code> method to define new services. Any service defined here will then be automatically injected anywhere your application requests it.\"\n       , \"Project\": \"Here is a service definition for the <code>Project</code> resource class. The class will represent the data associated with each 'project'. It has methods for retrieving and storing the data.\"\n       , \"$resource\": \"A <code>$resource</code> is a service used to create resource classes. The resource class comes preconfigured with <code>query()</code>, <code>get()</code>, <code>save()</code>, and <code>remove()</code>, methods as an API to communicate with persistence servers. Additionally, the class can be extended with behavior specific to your application.\"\n       , \"apiKey\": \"URL query parameter which needs to be sent with all requests to the <code>mongolab</code> data storage engine.\"\n       , \"update\": \"We are defining <code>update()</code> method on the resource. It will use HTTP <code>PUT</code> method for the request.\"\n       , \"prototype\": \"Here we're extending the resource class with methods specific to our application's persistence engine.\"\n       }\n     }\n    </script>\n  </div>\n  <div class=\"tabs-code\">\n    <!-- ============== Tabs ============== -->\n    <script id=\"components.js\">\n      angular.module('components', []).\n        directive('tabs', function() {\n          return {\n            restrict: 'E',\n            transclude: true,\n            scope: {},\n            controller: function($scope, $element) {\n              var panes = $scope.panes = [];\n\n              $scope.select = function(pane) {\n                angular.forEach(panes, function(pane) {\n                  pane.selected = false;\n                });\n                pane.selected = true;\n              }\n\n              this.addPane = function(pane) {\n                if (panes.length == 0) $scope.select(pane);\n                panes.push(pane);\n              }\n            },\n            template:\n              '<div class=\"tabbable\">' +\n                '<ul class=\"nav nav-tabs\">' +\n                  '<li ng-repeat=\"pane in panes\" ng-class=\"{active:pane.selected}\">'+\n                    '<a href=\"\" ng-click=\"select(pane)\">{{pane.title}}</a>' +\n                  '</li>' +\n                '</ul>' +\n                '<div class=\"tab-content\" ng-transclude></div>' +\n              '</div>',\n            replace: true\n          };\n        }).\n        directive('pane', function() {\n          return {\n            require: '^tabs',\n            restrict: 'E',\n            transclude: true,\n            scope: { title: '@' },\n            link: function(scope, element, attrs, tabsCtrl) {\n              tabsCtrl.addPane(scope);\n            },\n            template:\n              '<div class=\"tab-pane\" ng-class=\"{active: selected}\" ng-transclude>' +\n              '</div>',\n            replace: true\n          };\n        })\n    </script>\n    <script>\n      angular.module('components-us', ['components', 'ngLocal.us']);\n      angular.module('components-sk', ['components', 'ngLocal.sk']);\n    </script>\n    <script id=\"beers.js\">\n      function BeerCounter($scope, $locale) {\n        $scope.beers = [0, 1, 2, 3, 4, 5, 6];\n        if ($locale.id == 'en-us') {\n          $scope.beerForms = {\n            0: 'no beers',\n            one: '{} beer',\n            other: '{} beers'\n          };\n        } else {\n          $scope.beerForms = {\n            0: 'žiadne pivo',\n            one: '{} pivo',\n            few: '{} pivá',\n            other: '{} pív'\n          };\n        }\n      }\n    </script>\n    <script type=\"text/ng-template\" id=\"tabs.html\">\n      <tabs>\n        <pane title=\"Localization\">\n          Date: {{ '2012-04-01' | date:'fullDate' }} <br>\n          Currency: {{ 123456 | currency }} <br>\n          Number: {{ 98765.4321 | number }} <br>\n        </pane>\n        <pane title=\"Pluralization\">\n          <div ng-controller=\"BeerCounter\">\n            <div ng-repeat=\"beerCount in beers\">\n              <ng-pluralize count=\"beerCount\" when=\"beerForms\"></ng-pluralize>\n            </div>\n          </div>\n        </pane>\n      </tabs>\n    </script>\n    <script type=\"text/ng-template\" id=\"tabs.annotation\">\n      { \"tabs.html\":\n        { \"components\": \"The <code>ng-app</code> activates the <code>component</code> module for this page region. The module contains HTML extension for <code>&lt;tabs&gt;</code> and <code>&lt;pane&gt;</code> components.\"\n        , \"tabs\": \"We've extended HTML's vocabulary with a custom <code>tabs</code> element. The <code>tabs</code> abstracts the complex HTML structure and behavior necessary for rendering of tabs. The result is a more readable view and very easily reusable syntax.\"\n        , \"pane\": \"Again, we've extended the HTML vocabulary with a custom <code>pane</code> element. The <code>pane</code> element renders the panes of each tab. The result is a more readable view.\"\n        , \"title\": \"Components can take input parameters in the form of HTML attributes. In this case the <code>title</code> attribute specifies the tab's text.\"\n        , \"Localization\": \"An example demonstrating localization features of AngularJS: date, number and currency formatting.\"\n        , \"Pluralization\": \"An example demonstrating pluralization features of AngularJS. Notice that that the plural form of 'beer' changes in 'SK' locale at zero, one, two, and five beers.\"\n        , \"BeerCounter\": \"We use the <code>BeerCounter</code> controller to set up counting rules depending on the locale.\"\n        , \"ng-pluralize\": \"The <code>ng-pluralize</code> directive selects the right plural format for each locale. Unlike English, other languages often have complex plural rules depending on the number of items involved.\"\n        , \"count\": \"Binds to the number property. The count becomes the selector for the plural form to choose.\"\n        , \"when\": \"Binds to pluralization rules. The rules are unique for each locale and language combination.\"\n        }\n      , \"components.js\":\n        { \"directive\": \"Use the module's <code>directive()</code> method to define new HTML vocabulary for our components. \"\n        , \"tabs\": \"Define the <code>&lt;tabs&gt;</code> component.\"\n        , \"controller\": \"Just like with the application, the component can have a controller that provides the component's behavior.\"\n        , \"$element\": \"Current DOM element of the component.\"\n        , \"$scope\": \"Current scope of the component.\"\n        , \"select\": \"Publish a <code>select()</code> method which will be used by the view to switch between tabs.\"\n        , \"addPane\": \"Components often need to collaborate together as a unit. In our case the <code>&lt;pane&gt;</code> will use the <code>addPane()</code> method to be register itself with its <code>&lt;tabs&gt;</code> container.\"\n        , \"template\": \"The <code>template</code> is the HTML which needs to be rendered by the browser instead of the <code>&lt;tabs&gt;</code> placeholder. Notice that the HTML in this template can have other directives within it.\"\n        , \"restrict\": \"The <code>restrict</code> specifies the HTML format of the component. In this case the <code>&lt;tabs&gt;</code> must be an HTML element.\"\n        , \"ng-transclude\": \"Marks the location where the contents of the <code>&lt;tabs&gt;</code> element will be placed.\"\n        , \"transclude\": \"Specifies that when AngularJS replaces the <code>&lt;tabs&gt;</code> element with the expanded HTML that it should place the original content somewhere specified by an <code>ng-transclude</code> directive (see below).\"\n        , \"scope\": \"Our component needs to have a private scope so that its view properties are not accidentally modified outside the <code>&lt;tabs&gt;</code>. If you do need to expose attributes, you can declare input/output attributes. See the <code>&lt;pane&gt;</code> component below for an example.\"\n        , \"replace\": \"Tells AngularJS to replace the original <code>&lt;tabs&gt;</code> element should be replaced with the <code>template</code> rather than appending to it.\"\n        , \"active\": \"We set the <code>active</code> CSS class to show the currently active tab.\"\n        , \"require\": \"Specify that the <code>&lt;pane&gt;</code> component must be inside a <code>&lt;tabs&gt;</code> component. This gives the <code>&lt;pane&gt;</code> component to access to the <code>&lt;tabs&gt;</code>' controller methods -- the <code>addPane()</code> method in this case.\"\n        , \"tabsCtrl\": \"As we've specified we <code>require</code> the <code>&lt;tabs&gt;</code> as our container, we get passed its controller instance.\"\n        , \"ng-click\": \"Select the clicked tab.\"\n        , \"bind\": \"Specifies how is the <code>title</code> attribute on the <code>&lt;pane&gt;</code> element interpreted. The <code>bind</code> strategy copies the interpolated value to <code>&lt;pane&gt;</code>'s scope. This makes <code>title</code> available for binding in <code>template</code>.\"\n        }\n      , \"beers.js\":\n        { \"$locale\": \"The <code>$locale</code> service contains meta-data for the current locale. There are AngularJS locale modules available for each language locale combination.\"\n        , \"beers\": \"Set up beers counting array. We will iterate over this array and see how the 'beers' count gets rendered for each count.\"\n        , \"id\": \"Create different pluralization rules based on locale. In an actual app, one would load a different module which would contain translation as well as localization rules for each language.\"\n        , \"beerForms\": \"Pluralization rules for English.\"\n        }\n      }\n    </script>\n  </div>\n\n  <!-- The Download Modal that is to be shown when the user clicks on Download in the main AngularJS.org page -->\n  <div class=\"modal fade downloadModal\" id=\"downloadModal\" ng-class=\"{in: lightbox()}\">\n    <div class=\"modal-header\">\n      <button type=\"button\" class=\"close\" ng-click=\"lightbox(false)\">×</button>\n      <h2 id=\"downloadLabel\">Download AngularJS</h2>\n    </div>\n    <div class=\"modal-body\">\n\n      <dl class=\"dl-horizontal\">\n        <dt>Branch</dt>\n        <dd>\n          <span>\n            <span class=\"btn-group\" data-toggle=\"buttons-radio\">\n              <button id=\"bluePill\" type=\"button\" ng-class=\"getPillClass('stable', currentBranch)\" class=\"btn bluePill\" ng-click=\"selectType('stable')\">Stable</button>\n              <button id=\"redPill\" type=\"button\" ng-class=\"getPillClass('unstable', currentBranch)\" class=\"btn redPill\"  ng-click=\"selectType('unstable')\">Unstable</button>\n              <a id=\"extraInfoBranch\" href=\"\" rel=\"popover\" data-original-title=\"Branches\" data-content=\"<dl class='dl-horizontal'><dt>Stable</dt><dd>The Release has been well tested, and the API for this version will not undergo any further change.</dd><dt>Unstable</dt><dd>This version is still being worked on, and API's are subject to change without any prior notice. Use only if you want to remain on the most cutting edge...</dd></dl>\"><i class=\"icon-question-sign\"></i></a>\n            </span>\n\n          </span>\n\n        </dd>\n        <dt>Build</dt>\n        <dd>\n          <span>\n            <span class=\"btn-group\" data-toggle=\"buttons-radio\">\n              <button type=\"button\" class=\"btn\" ng-class=\"getPillClass('minified', currentBuild)\" ng-click=\"selectBuild('minified')\" ng-class=\"get\">Minified</button>\n              <button type=\"button\" class=\"btn\" ng-class=\"getPillClass('uncompressed', currentBuild)\" ng-click=\"selectBuild('uncompressed')\">Uncompressed</button>\n              <button type=\"button\" class=\"btn\" ng-class=\"getPillClass('zipped', currentBuild)\" ng-click=\"selectBuild('zipped')\">Zip</button>\n              <a id=\"extraInfoBuild\" href=\"\" rel=\"popover\" data-original-title=\"Branches\" data-content=\"<dl class='dl-horizontal'><dt>Minified</dt><dd>Minified and obfuscated version of the AngularJS base code. Use this in your deployed application (but only if you can't use Google's CDN)</dd><dt>Uncompressed</dt><dd>The main AngularJS source code, as is. Useful for debugging and development purpose, but should ideally not be used in your deployed application</dd><dt>Zipped</dt><dd>The zipped version of the Angular Build, which contains both the builds of AngularJS, as well as documentation and other extras</dd></dl>\"><i class=\"icon-question-sign\"></i></a>\n            </span>\n\n          </span>\n\n        </dd>\n        <dt>CDN</dt>\n        <dd>\n          <span class=\"input-append\">\n            <input class=\"input-xxlarge\" type=\"text\" readonly=\"readonly\" ng-model=\"cdnURL\">\n            <a id=\"extraInfoCDN\" href=\"\" rel=\"popover\" data-original-title=\"Why Google CDN?\" data-content=\"While downloading and using the AngularJS source code is great for development, we recommend that you source the script from Google's CDN (Content Delivery Network) in your deployed, customer facing app whenever possible. You get the following advantages for doing so: <ul><li><strong>Better Caching :</strong> If you host AngularJS yourself, your users will have to download the source code atleast once. But if the browser sees that you are referring to Google CDN's version of AngularJS, and your user has visited another app which uses AngularJS, then he can avail the benefits of caching, and thus reduce one download, speeding up his overall experience!</li><li><strong>Decreased Latency :</strong> Google's CDN distributes your static content across the globe, in various diverse, physical locations. It increases the odds that the user gets a version of AngularJS served from a location near him, thus reducing overall latency.</li><li><strong>Increased Parallelism : </strong>Using Google's CDN reduces one request to your domain. Depending on the browser, the number of parallel requests it can make to a domain is restricted (as low as 2 in IE 7). So it can make a gigantic difference in loading times for users of those browsers.</li></ul>\"><i class=\"icon-question-sign\"></i></a>\n          </span>\n        </dd>\n      </dl>\n\n    </div>\n    <div class=\"modal-footer\">\n      <a ng-href=\"http://code.angularjs.org/{{getVersion(currentBranch)}}\">Extras</a>\n      <a href=\"http://code.angularjs.org/\">Previous Versions</a>\n\n      <a class=\"btn btn-primary btn-large\" style=\"float: right; font-size: 20px; padding-left: 20px;\" ng-href=\"{{downloadLink()}}\" download><i class=\"icon-download-alt icon-large\"></i> Download</a>\n    </div>\n  </div>\n  <div id=\"downloadModalBackdrop\" class=\"modal-backdrop fade\" ng-class=\"{in: lightbox()}\" ng-click='lightbox(false)'></div>\n</body>\n</html>\n"]],"start1":0,"start2":0,"length1":0,"length2":55104}]],"length":55104}
{"contributors":[],"silentsave":false,"ts":1361103858991,"patch":[[{"diffs":[[0,"<h1>"],[-1,"HTML enhanced for web apps!"],[1,"웹앱을 위한 강력한 HTML"],[0,"</h1"]],"start1":10117,"start2":10117,"length1":35,"length2":23},{"diffs":[[0,"</i>"],[-1," View on "],[0,"GitHub"],[1," 에서 보기"],[0,"\n   "]],"start1":10315,"start2":10315,"length1":23,"length2":20},{"diffs":[[0,"e\"></i> "],[-1,"Download"],[1,"다운로드"],[0,"\n       "]],"start1":10530,"start2":10530,"length1":24,"length2":20},{"diffs":[[0,"w\">\n"],[-1,"              Follow +AngularJS on\n"],[0,"    "]],"start1":10720,"start2":10720,"length1":43,"length2":8},{"diffs":[[0,"0px;\"/></a>\n"],[1,"              +AngularJS 팔로우\n"],[0,"            "]],"start1":10951,"start2":10951,"length1":24,"length2":53},{"diffs":[[0,"ue\">"],[-1,"Follow "],[0,"@ang"]],"start1":11349,"start2":11349,"length1":15,"length2":8},{"diffs":[[0,"ngularjs"],[1," 팔로우 하기"],[0,"</a>\n   "]],"start1":11355,"start2":11355,"length1":16,"length2":23},{"diffs":[[0,"js\">"],[-1,"Tweet"],[1,"트윗"],[0,"</a>"]],"start1":11642,"start2":11642,"length1":13,"length2":10},{"diffs":[[0,"<h3>"],[-1,"Watch as we build this app"],[1,"앱 제작 영상 보기"],[0,"</h3"]],"start1":13364,"start2":13364,"length1":34,"length2":18},{"diffs":[[0,"ol\">"],[-1,"Add Some Control"],[1,"컨트롤 추가하기"],[0,"</h1"]],"start1":13639,"start2":13639,"length1":24,"length2":16},{"diffs":[[0,"<h3>"],[-1,"Data Binding"],[1,"데이터 바인딩"],[0,"</h3"]],"start1":13713,"start2":13713,"length1":20,"length2":15},{"diffs":[[0,"    <h3>"],[-1,"Controller"],[1,"컨트롤러"],[0,"</h3>\n  "]],"start1":14071,"start2":14071,"length1":26,"length2":20},{"diffs":[[0,"<h3>"],[-1,"Plain JavaScript"],[1,"순수 자바스크립트"],[0,"</h3"]],"start1":14410,"start2":14410,"length1":24,"length2":17},{"diffs":[[0," <label>"],[-1,"Name"],[1,"이름"],[0,":</label"]],"start1":21743,"start2":21743,"length1":20,"length2":18},{"diffs":[[0,"er=\""],[-1,"Enter a name here"],[1,"이름을 입력하세요."],[0,"\">\n "]],"start1":21819,"start2":21819,"length1":25,"length2":18},{"diffs":[[0,"    <h1>"],[-1,"Hello"],[1,"안녕하세요"],[0," {{yourN"]],"start1":21853,"start2":21853,"length1":21,"length2":21},{"diffs":[[0,"urName}}"],[1," 님"],[0,"!</h1>\n "]],"start1":21871,"start2":21871,"length1":16,"length2":18},{"diffs":[[0,"    <h2>"],[-1,"Todo"],[1,"할일"],[0,"</h2>\n  "]],"start1":23742,"start2":23742,"length1":20,"length2":18},{"diffs":[[0,"<h2>"],[-1,"JavaScript Projects"],[1,"자바스크립트 프로젝트"],[0,"</h2"]],"start1":31386,"start2":31386,"length1":27,"length2":19},{"diffs":[[0,"    <th>"],[-1,"Project"],[1,"프로젝트"],[0,"</th>\n  "]],"start1":31634,"start2":31634,"length1":23,"length2":20},{"diffs":[[0,"    <th>"],[-1,"Description"],[1,"설명"],[0,"</th>\n  "]],"start1":31658,"start2":31658,"length1":27,"length2":18}]],"length":55005,"saved":false}
